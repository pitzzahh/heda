name: "publish"

on:
  push:
    tags:
      - "*.*.*"

env:
  APP_NAME: "Hierarchical Electrical Design Analyzer"

jobs:
  determine-platforms:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [ -n "${{ github.event.head_commit.message }}" ]; then
            # Extract PLATFORMS from commit message if it exists
            PLATFORMS=$(echo "${{ github.event.head_commit.message }}" | grep -oP 'PLATFORMS=\K[^,\s]+(?:,[^,\s]+)*' || echo "")
            
            if [ -n "$PLATFORMS" ]; then
              # Create matrix configuration dynamically
              matrix="{\"include\":["
              for platform in $(echo "$PLATFORMS" | tr ',' '\n'); do
                case $platform in
                  "macos-latest")
                    matrix="$matrix{\"platform\":\"macos-latest\",\"args\":\"--target aarch64-apple-darwin\"},{\"platform\":\"macos-latest\",\"args\":\"--target x86_64-apple-darwin\"},"
                    ;;
                  "ubuntu-22.04")
                    matrix="$matrix{\"platform\":\"ubuntu-22.04\",\"args\":\"\"},"
                    ;;
                  "windows-latest")
                    matrix="$matrix{\"platform\":\"windows-latest\",\"args\":\"\"},"
                    ;;
                esac
              done
              matrix="${matrix%,}]}"
            else
              # Default matrix if no platforms specified
              matrix='{
                "include": [
                  {"platform": "macos-latest", "args": "--target aarch64-apple-darwin"},
                  {"platform": "macos-latest", "args": "--target x86_64-apple-darwin"},
                  {"platform": "ubuntu-22.04", "args": ""},
                  {"platform": "windows-latest", "args": ""}
                ]
              }'
            fi
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  release:
    needs: determine-platforms
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.determine-platforms.outputs.matrix)}}

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install npm as global
        run: bun install -g npm

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install frontend
        run: bun install

      - name: CI Upload Windows
        if: ${{ github.ref_type == 'branch' && matrix.platform == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: "Windows Installers"
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe

      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_level: warn
          version: ${{ github.ref_name }}
          path: ./changelog.md

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        if: ${{ github.ref_type == 'tag' }}
        env:
          CI: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "${{ env.APP_NAME }} v__VERSION__"
          releaseBody: ${{ steps.changelog_reader.outputs.changes }}
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
